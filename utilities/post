#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'net/http'
require 'time'
require 'uri'

Post = Struct.new(
  :body,
  :category,
  :image,
  :date,
  :imdb_id,
  :rating,
  :slug,
  :tags,
  :title,
  keyword_init: true
)

class Poster
  def run
    zip_files = Dir['day_one_export/*.zip']
    zip_files.each do |zip_file|
      export_path = File.basename(zip_file, '.zip')
      `unzip -d day_one_import/#{export_path} #{zip_file}`
    end
    folders = Dir['day_one_import/*']
    folders.each do |folder|
      import_folder(folder)
    end
  end

  def cleanup
    # remove everythinng inside day_one_import except. gitkeep
    `rm -rf day_one_import/*`
    # remove everythinng inside day_one_export except. gitkeep
    `rm -rf day_one_export/*`
  end

  def import_folder(path)
    journal = JSON.parse(File.read("#{path}/Journal.json"))
    entries = journal['entries']
    filenames = entries.map do |entry|
      import_entry(entry, path)
    end
  end

  def import_entry(entry, export_path)
    post = Post.new(tags: [])
    title_match = entry['text'].match(/# (.*)/)
    if title_match
      post.title = title_match[1]
    else
      post.title = entry['text'].split("\n").first
    end
    post.slug = post.title.gsub(/[^a-zA-Z0-9\s]/, '').gsub(/\s+/, '-').downcase
    post.date = Time.parse(entry['creationDate'])
    copy_photos(entry, export_path)
    copy_videos(entry, export_path)
    post.body = parse_body(entry, post.title)
    post.image = "/#{asset_path_for_photo(entry['photos'].first)}" if entry['photos']&.first
    post.body, post.category = parse_out(post.body, 'Category', 'blog')
    post.body, tags = parse_out(post.body, 'Tags', '')
    post.tags = tags.split(',').map(&:strip).map(&:downcase).map { |tag| tag.gsub(/^#/, '') }

    case post.category.split('/').last
    when 'reading'
      post.body, rating = parse_out(post.body, 'Rating', 0)
      post.rating = rating.to_i
    when 'watching'
      post.body, rating = parse_out(post.body, 'Rating', 0)
      post.rating = rating.to_i
      post.body, post.imdb_id = parse_out(post.body, 'IMDB', nil)
      post.image = movie_cover_image(post.imdb_id)
      post.tags += ['movies'] unless post.tags.include?('movies')
    when 'attending'
      post.tags += ['music'] unless post.tags.include?('music')
    end
    create_file(post)
  end

  def parse_out(text, identifier, default = nil)
    matched = text.match(/^#{identifier}: (.*)/)
    return text, default unless matched

    [text.gsub(/^#{identifier}: (.*)/, ''), matched[1]]
  end

  def asset_path_for_video(video)
    "assets/videos/#{video['identifier']}.#{video['type']}"
  end

  def asset_path_for_photo(photo)
    "assets/images/#{photo['identifier']}.#{photo['type']}"
  end

  def copy_videos(entry, export_path)
    (entry['videos'] || []).each do |video|
      `cp #{export_path}/videos/#{video['md5']}.#{video['type']} #{asset_path_for_video(video)}`
    end
  end

  def copy_photos(entry, export_path)
    (entry['photos'] || []).each do |photo|
      `cp #{export_path}/photos/#{photo['md5']}.#{photo['type']} #{asset_path_for_photo(photo)}`
    end
  end

  def parse_body(entry, title)
    body = entry['text'].gsub(/^# (.*)/, '').strip
    body = body.split("\n")[1..-1].join("\n") if body.split("\n").first == title
    (entry['photos'] || []).each do |photo|
      img_tag = "/#{asset_path_for_photo(photo)}"
      body.gsub!(%r{dayone-moment://#{photo['identifier']}}, img_tag)
    end
    (entry['videos'] || []).each do |video|
      video_tag = "<video controls src=\"/#{asset_path_for_video(video)}\"></video>"
      body.gsub!(%r{!\[\]\(dayone-moment:/video/#{video['identifier']}\)}, video_tag)
    end
    body = body.split("\n").map do |line|
      if line.match?(/https:\/\/www.youtube.com\/watch\?v=(.*)/)
        youtube_id = line.match(/https:\/\/www.youtube.com\/watch\?v=(.*)/)[1]
        "<iframe width=\"100%\" height=\"340\" src=\"https://www.youtube-nocookie.com/embed/#{youtube_id}\" title=\"YouTube embed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>"
      else
        line
      end
    end.join("\n")
    body
  end

  def create_file(post)
    filename = "#{post.category}/_posts/#{post.date.strftime('%Y-%m-%d')}-#{post.slug}.md"

    File.open(filename, 'w') do |file|
      file.puts '---'
      file.puts 'layout: Post'
      file.puts "date: #{post.date.strftime('%Y-%m-%d %H:%M:%S %z')}"
      file.puts "title: \"#{post.title}\""
      file.puts 'toc: true'
      file.puts "rating: #{post.rating}" if post.rating
      file.puts "imdb_id: #{post.imdb_id}" if post.imdb_id
      file.puts "image: #{post.image}"
      file.puts 'description: '
      file.puts 'tags: '
      post.tags.each do |tag|
        file.puts "  - #{tag}"
      end
      file.puts '---'
      file.puts ''
      file.puts post.body
    end
    filename
  end

  def movie_cover_image(imdb_id)
    key = File.read(File.expand_path('.omdb_token')).strip
    url = "https://www.omdbapi.com/?i=#{imdb_id}&apikey=#{key}"
    uri = URI(url)
    response = Net::HTTP.get(uri)
    json = JSON.parse(response)
    json['Poster']
  end
end

poster = Poster.new
poster.run
poster.cleanup
