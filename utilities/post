#!/usr/in/env ruby
# frozen_string_literal: true

require 'json'
require 'net/http'
require 'time'
require 'uri'

Post = Struct.new(
  :body,
  :category,
  :image,
  :date,
  :imdb_id,
  :rating,
  :slug,
  :tags,
  :title,
  keyword_init: true
)

class Poster
  def run(export_path)
    journal = JSON.parse(File.read("#{export_path}/Journal.json"))
    entries = journal['entries']
    filenames = entries.map do |entry|
      import_entry(entry, export_path)
    end
    exec("nvim -p #{filenames.join(' ')}")
  end

  def import_entry(entry, export_path)
    post = Post.new(tags: [])
    title_match = entry['text'].match(/# (.*)/)
    if title_match
      post.title = title_match[1]
    else
      puts entry['text']
      puts 'Title: ?'
      post.title = $stdin.gets.chomp
    end
    puts "Title: #{post.title}"
    post.slug = post.title.gsub(/[^a-zA-Z0-9\s]/, '').gsub(/\s+/, '-').downcase
    post.date = Time.parse(entry['creationDate'])
    copy_photos(entry, export_path)
    copy_videos(entry, export_path)
    post.body = parse_body(entry)
    post.image = "/#{asset_path_for_photo(entry['photos'].first)}" if entry['photos']&.first

    puts 'Category: ?'
    post.category = $stdin.gets.chomp

    case post.category.split('/').last
    when 'reading'
      puts 'Rating: ?'
      post.rating = $stdin.gets.chomp.to_i
    when 'watching'
      puts 'Rating: ?'
      post.rating = $stdin.gets.chomp.to_i
      puts 'IMDB ID: ?'
      post.imdb_id = $stdin.gets.chomp
      post.image = movie_cover_image(post.imdb_id)
      post.tags = ['movies']
    when 'attending'
      post.tags = ['music']
    end
    create_file(post)
  end

  def asset_path_for_video(video)
    "assets/videos/#{video['identifier']}.#{video['type']}"
  end

  def asset_path_for_photo(photo)
    "assets/images/#{photo['identifier']}.#{photo['type']}"
  end

  def copy_videos(entry, export_path)
    (entry['videos'] || []).each do |video|
      `cp #{export_path}/videos/#{video['md5']}.#{video['type']} #{asset_path_for_video(video)}`
    end
  end

  def copy_photos(entry, export_path)
    (entry['photos'] || []).each do |photo|
      `cp #{export_path}/photos/#{photo['md5']}.#{photo['type']} #{asset_path_for_photo(photo)}`
    end
  end

  def parse_body(entry)
    body = entry['text'].gsub(/^# (.*)/, '').strip
    (entry['photos'] || []).each do |photo|
      img_tag = "/#{asset_path_for_photo(photo)}"
      body.gsub!(%r{dayone-moment://#{photo['identifier']}}, img_tag)
    end
    (entry['videos'] || []).each do |video|
      video_tag = "<video controls src=\"/#{asset_path_for_video(video)}\"></video>"
      body.gsub!(%r{!\[\]\(dayone-moment:/video/#{video['identifier']}\)}, video_tag)
    end
    body
  end

  def create_file(post)
    filename = "#{post.category}/_posts/#{post.date.strftime('%Y-%m-%d')}-#{post.slug}.md"

    File.open(filename, 'w') do |file|
      file.puts '---'
      file.puts 'layout: Post'
      file.puts "date: #{post.date.strftime('%Y-%m-%d %H:%M:%S %z')}"
      file.puts "title: \"#{post.title}\""
      file.puts 'toc: true'
      file.puts "rating: #{post.rating}" if post.rating
      file.puts "imdb_id: #{post.imdb_id}" if post.imdb_id
      file.puts "image: #{post.image}"
      file.puts 'description: '
      file.puts 'tags: '
      post.tags.each do |tag|
        file.puts "  - #{tag}"
      end
      file.puts '---'
      file.puts ''
      file.puts post.body
    end
    filename
  end

  def movie_cover_image(imdb_id)
    key = File.read(File.expand_path('.omdb_token')).strip
    url = "https://www.omdbapi.com/?i=#{imdb_id}&apikey=#{key}"
    uri = URI(url)
    response = Net::HTTP.get(uri)
    json = JSON.parse(response)
    json['Poster']
  end
end

# run the script with the first argument passed to it
Poster.new.run(ARGF.argv[0])
