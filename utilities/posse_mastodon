#!/usr/bin/env ruby

require 'jekyll'
require 'json'
require 'net/http'
require 'time'

module POSSE
  class JekyllFilter
    include Jekyll::Filters
    attr_accessor :site, :context

    def initialize(opts = {})
      @site = Jekyll::Site.new(Jekyll.configuration(opts))
      @context = Liquid::Context.new(@site.site_payload, {}, :site => @site)
    end
  end

  class Mastodon
    class Error < StandardError; end

    attr_reader :site, :post_after

    def initialize
      @site = Jekyll::Site.new(Jekyll.configuration({}))
      @site.read
      @post_after = Date.parse('2024-06-02').to_time
      @jekyll_filter = JekyllFilter.new
      @content_template = Liquid::Template.parse("{{ x | strip_html | strip | escape | truncate: 140}}")
      @token = ENV['MASTODON_SOCIAL_TOKEN']
    end

    def post_all
      site.posts.docs.each do |post|
        post(post) if should_post?(post)
      end
    end

    def post(post)
      message = "#{post.data['title']}\n\n#{url(post)}"
      status = post_status(message)
      mastodon_social_status_url = status['url']
      save_status(post, mastodon_social_status_url)
    end

    def save_status(post, mastodon_social_status_url)
      post_path = post.path
      post_content = File.read(post_path)
      new_post_content = post_content.gsub(
        /mastodon_social_status_url: .*/,
        "mastodon_social_status_url: #{mastodon_social_status_url}"
      )
      File.write(post_path, new_post_content)
    end

    private

    def should_post?(post)
      posted_url = post.data['mastodon_social_status_url']
      posted_url && !posted_url.match?(/https\S*\/\d+/)
    end

    def post_status(status)
      uri = URI.parse('https://mastodon.social/api/v1/statuses')
      req = Net::HTTP::Post.new(uri)
      req['Authorization'] = "Bearer #{@token}"
      req['Content-Type'] = 'application/json'
      req.body = { status: status }.to_json
      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        http.request(req)
      end

      raise Error, 'Post request failed' unless res.is_a?(Net::HTTPSuccess)

      JSON.parse(res.body)
    end

    def url(post)
      "#{site.config['url']}#{post.url}"
    end

    def excerpt(post)
      post.data['description'] ||
        @content_template.render('x' => @jekyll_filter.markdownify(post.content))
    end
  end
end

POSSE::Mastodon.new.post_all
