#!/usr/bin/env ruby
# frozen_string_literal: true

require 'jekyll'
require 'json'
require 'net/http'

# TODO: post full contents if they fit 500chars (23char for a URL)
#       ref: https://docs.joinmastodon.org/user/posting/
# TODO: maybe thread text-only posts?
#
# TODO: link/facet to handles if present
#
# TODO: reply in thread if reply_to is present and is a mastodon URL
#
# TODO: Get reply/boost/fav counts and update post

module POSSE
  class JekyllFilter
    include Jekyll::Filters
    attr_accessor :site, :context

    def initialize(opts = {})
      @site = Jekyll::Site.new(Jekyll.configuration(opts))
      @context = Liquid::Context.new(@site.site_payload, {}, site: @site)
    end
  end

  class Mastodon
    class Error < StandardError; end

    attr_reader :site

    def initialize
      @site = Jekyll::Site.new(Jekyll.configuration({}))
      @site.read
      @jekyll_filter = JekyllFilter.new
      @content_template = Liquid::Template.parse('{{ x | strip_html | strip | escape | truncate: 140}}')
      @token = ENV.fetch('MASTODON_SOCIAL_TOKEN', nil)
    end

    def post_all
      site.posts.docs.each do |post|
        post(post) if should_post?(post)
      end
    end

    def post(post)
      puts "Posting: #{url(post)}"
      text = if post.data['hide_title']
               excerpt(post)
             else
               post.data['title']
             end
      message = "#{text}\n\n#{url(post)}"
      status = post_status(message)
      puts "Posted:  #{url(post)} to #{status['url']}"
      mastodon_social_status_url = status['url']
      save_status(post, mastodon_social_status_url)
    end

    def save_status(post, mastodon_social_status_url)
      post_path = post.path
      post_content = File.read(post_path)
      new_post_content = post_content.gsub(
        /^mastodon_social_status_url: .*/,
        "mastodon_social_status_url: #{mastodon_social_status_url}"
      )
      File.write(post_path, new_post_content)
    end

    private

    def should_post?(post)
      posted_url = post.data['mastodon_social_status_url']
      !posted_url.nil? && !(posted_url || '').match?(%r{https\S*/\d+})
    end

    def post_status(status)
      uri = URI.parse('https://mastodon.social/api/v1/statuses')
      req = Net::HTTP::Post.new(uri)
      req['Authorization'] = "Bearer #{@token}"
      req['Content-Type'] = 'application/json'
      req.body = { status: status }.to_json
      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        http.request(req)
      end

      unless res.is_a?(Net::HTTPSuccess)
        puts res.body
        raise Error, 'Post request failed'
      end

      JSON.parse(res.body)
    end

    def url(post)
      "#{site.config['url']}#{post.url}"
    end

    def excerpt(post)
      post.data['description'] ||
        @content_template.render('x' => @jekyll_filter.markdownify(post.content))
    end
  end
end

POSSE::Mastodon.new.post_all
