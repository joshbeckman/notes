#!/usr/bin/env ruby
# frozen_string_literal: true

require 'jekyll'
require 'date'
require 'yaml'
require 'time'

module SerialNumbers
  class Serializer
    def initialize
      @site = Jekyll::Site.new(Jekyll.configuration({}))
      @site.read
      @counters = Hash.new { |h, k| h[k] = Hash.new(0) }
    end

    def serialize_all
      serialize_posts
      serialize_pages
    end

    private

    def serialize_posts
      # Process posts chronologically to ensure consistent numbering
      # Secondary sort by title for posts with the same date
      @site.posts.docs.sort_by { |post| [post.date, post.data['title'] || ''] }.each do |post|
        year = post.date.year
        category = determine_category(post)
        series_code = generate_series_code(category)

        @counters[year][series_code] += 1
        counter = @counters[year][series_code]

        # Format serial number as YYYY.SSS.###
        serial_number = format('%04d.%s.%03d', year, series_code, counter)

        # Update the post file with serial number
        update_file_with_serial_number(post.path, serial_number)
      end
    end

    def serialize_pages
      pages_to_process = @site.pages.map do |page|
        # Skip special pages and assets
        next if page.url.include?('assets')
        next if page.url.include?('.json')
        next if page.url.include?('.xml')
        next if page.url == '/404.html'
        next if page.data['layout'].nil?

        date = if page.data['date']
                 Date.parse(page.data['date'].to_s)
               else
                 get_first_commit_date(page.path)
               end

        { page: page, date: date }
      end.compact

      pages_to_process.sort_by { |item| [item[:date], item[:page].data['title'] || ''] }.each do |item|
        page = item[:page]
        year = item[:date].year
        series_code = 'PAE'

        @counters[year][series_code] += 1
        counter = @counters[year][series_code]

        serial_number = format('%04d.%s.%03d', year, series_code, counter)

        # Update the page file with serial number
        update_file_with_serial_number(page.path, serial_number)
      end
    end

    def determine_category(post)
      if post.data['category']
        post.data['category']
      elsif post.data['categories'] && !post.data['categories'].empty?
        post.data['categories'].first
      elsif post.data['layout']
        post.data['layout'].downcase
      else
        'post'
      end
    end

    def generate_series_code(category)
      # Generate a 3-letter code from the category name
      # Singularize plural categories first
      singularized = category.to_s.downcase
      singularized = singularized.chomp('ies').concat('y') if singularized.end_with?('ies')
      singularized = singularized.chomp('es') if singularized.end_with?('ses', 'xes', 'zes', 'ches', 'shes')
      singularized = singularized.chomp('s') if singularized.end_with?('s') && !singularized.end_with?('ss')

      cleaned = singularized.gsub(/[^a-z]/, '')

      if cleaned.length >= 3
        # Take first letter, middle letter, and last letter for longer words
        if cleaned.length == 3
          cleaned.upcase
        else
          # Find middle consonants, prioritizing them over vowels
          middle_chars = cleaned[1..-2] # Get all middle characters
          consonants = middle_chars.chars.select { |c| !%w[a e i o u].include?(c) }

          if consonants.any?
            # Use the consonant closest to the middle
            middle_index = middle_chars.length / 2
            # Find the consonant closest to the middle position
            best_consonant = consonants.min_by { |c| (middle_chars.index(c) - middle_index).abs }
            (cleaned[0] + best_consonant + cleaned[-1]).upcase
          else
            # Fall back to middle character if no consonants
            middle_index = cleaned.length / 2
            (cleaned[0] + cleaned[middle_index] + cleaned[-1]).upcase
          end
        end
      elsif cleaned.length == 2
        # For 2-letter categories, add the first letter again
        (cleaned + cleaned[0]).upcase
      elsif cleaned.length == 1
        # For 1-letter categories, repeat 3 times
        (cleaned * 3).upcase
      else
        # Default fallback
        'PST'
      end
    end

    def get_first_commit_date(file_path)
      # Get the first commit date for a file using git log
      output = `git log --follow --format=%aI --reverse -- "#{file_path}" 2>/dev/null | head -1`
      if output && !output.strip.empty?
        Date.parse(output.strip)
      else
        # Fallback to current date if git command fails or no commits found
        Date.today
      end
    rescue StandardError
      # Fallback to current date on any error
      Date.today
    end

    def update_file_with_serial_number(file_path, serial_number)
      return unless File.exist?(file_path)

      content = File.read(file_path)

      # Check if file has YAML front matter
      if content =~ /\A(---\s*\n.*?\n?)^((---|\.\.\.)\s*$\n?)/m
        front_matter = ::Regexp.last_match(1)
        after_front_matter = ::Regexp.last_match.post_match

        # Parse YAML front matter with permitted classes
        yaml_content = YAML.safe_load(front_matter, permitted_classes: [Date, Time, DateTime, Symbol]) || {}

        # Only update if serial_number is different or doesn't exist
        if yaml_content['serial_number'] != serial_number
          yaml_content['serial_number'] = serial_number

          # Reconstruct the file with updated front matter
          # Remove the leading --- from to_yaml output
          yaml_string = yaml_content.to_yaml.gsub(/\A---\s*\n/, '')
          new_content = "---\n#{yaml_string}---\n#{after_front_matter}"

          File.write(file_path, new_content)
          puts "Updated: #{file_path} with serial number: #{serial_number}"
        end
      else
        puts "Warning: #{file_path} has no YAML front matter"
      end
    end
  end
end

# Run the serializer
serializer = SerialNumbers::Serializer.new
serializer.serialize_all
