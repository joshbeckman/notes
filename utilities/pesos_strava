#!/usr/bin/env ruby
# frozen_string_literal: true

require 'cgi'
require 'json'
require 'jekyll'
require 'net/http'
require 'polylines'
require 'strava-ruby-client'
require_relative 'models/post'
require_relative 'models/asset'

# ref: https://www.strava.com/settings/api

module PESOS
  class Strava
    class Error < StandardError; end

    attr_reader :client, :site

    def initialize
      @site = Jekyll::Site.new(Jekyll.configuration({}))
      @site.read
      @client = ::Strava::Api::Client.new(
        access_token: token
      )
    end

    def map_recent_activities(&)
      @client.athlete_activities.map(&)
    end

    def map_all_activities(&)
      @client.athlete_activities(per_page: 30, &)
    end

    def athlete_stats
      @client.athlete_stats(@client.athlete.id)
    end

    def heart_rate_zones
      @client.athlete_zones.heart_rate.zones
    end

    def mapbox_image_url(activity)
      map = activity.map
      return unless map&.summary_polyline && activity&.start_latlng&.any?

      decoded_summary_polyline = Polylines::Decoder.decode_polyline(map.summary_polyline)
      start_latlng = decoded_summary_polyline[0]
      end_latlng = decoded_summary_polyline[-1]
      "https://api.mapbox.com/styles/v1/mapbox/streets-v11/static/path-5+787af2-1.0(#{CGI.escape(map.summary_polyline)}),pin-s-s+e5b22e(#{start_latlng[1]},#{start_latlng[0]}),pin-s-f+89ae00(#{end_latlng[1]},#{end_latlng[0]})/auto/800x800?access_token=#{mapbox_token}"
    end

    def reverse_geocode(lat, lng)
      uri = URI.parse("https://api.mapbox.com/geocoding/v5/mapbox.places/#{lng},#{lat}.json?access_token=#{mapbox_token}")
      request = Net::HTTP::Get.new(uri)
      request.content_type = 'application/json'
      req_options = {
        use_ssl: uri.scheme == 'https'
      }
      res = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
        http.request(request)
      end

      unless res.is_a?(Net::HTTPSuccess)
        puts res.body
        raise Error, 'Reverse geocode request failed'
      end

      resp_body = JSON.parse(res.body)
      resp_body['features'].first['place_name']
    end

    def fetch_weather_conditions(activity)
      lat, lng = activity.start_latlng
      date = activity.start_date.strftime('%Y-%m-%d')
      hour = activity.start_date.hour
      uri = URI.parse("https://archive-api.open-meteo.com/v1/archive?latitude=#{lat}&longitude=#{lng}&start_date=#{date}&end_date=#{date}&hourly=temperature_2m,apparent_temperature,precipitation,rain,weathercode,windspeed_10m,winddirection_10m,relativehumidity_2m&timezone=auto")
      request = Net::HTTP::Get.new(uri)
      req_options = {
        use_ssl: uri.scheme == 'https'
      }
      res = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
        http.request(request)
      end

      unless res.is_a?(Net::HTTPSuccess)
        puts "Weather fetch failed: #{res.body}"
        return nil
      end

      resp_body = JSON.parse(res.body)
      hourly_data = resp_body['hourly']
      hour_index = hour
      {
        temperature: "#{hourly_data['temperature_2m'][hour_index]}°C",
        apparent_temperature: "#{hourly_data['apparent_temperature'][hour_index]}°C",
        precipitation: "#{hourly_data['precipitation'][hour_index]}mm",
        rain: "#{hourly_data['rain'][hour_index]}mm",
        humidity: "#{hourly_data['relativehumidity_2m'][hour_index]}%",
        weathercode: weather_description(hourly_data['weathercode'][hour_index]),
        windspeed: "#{hourly_data['windspeed_10m'][hour_index]}km/h",
        winddirection: "#{hourly_data['winddirection_10m'][hour_index]}°"
      }
    rescue StandardError => e
      puts "Error fetching weather: #{e.message}"
      nil
    end

    def weather_description(code)
      # WMO Weather interpretation codes
      # https://open-meteo.com/en/docs
      case code
      when 0 then 'Clear sky'
      when 1 then 'Mainly clear'
      when 2 then 'Partly cloudy'
      when 3 then 'Overcast'
      when 45 then 'Fog'
      when 48 then 'Depositing rime fog'
      when 51 then 'Light drizzle'
      when 53 then 'Moderate drizzle'
      when 55 then 'Dense drizzle'
      when 56 then 'Light freezing drizzle'
      when 57 then 'Dense freezing drizzle'
      when 61 then 'Slight rain'
      when 63 then 'Moderate rain'
      when 65 then 'Heavy rain'
      when 66 then 'Light freezing rain'
      when 67 then 'Heavy freezing rain'
      when 71 then 'Slight snow fall'
      when 73 then 'Moderate snow fall'
      when 75 then 'Heavy snow fall'
      when 77 then 'Snow grains'
      when 80 then 'Slight rain showers'
      when 81 then 'Moderate rain showers'
      when 82 then 'Violent rain showers'
      when 85 then 'Slight snow showers'
      when 86 then 'Heavy snow showers'
      when 95 then 'Thunderstorm'
      when 96 then 'Thunderstorm with slight hail'
      when 99 then 'Thunderstorm with heavy hail'
      else "Unknown (#{code})"
      end
    end

    def import_exercise_stats
      # write data to a file in _data as yaml
      stats = athlete_stats
      data = {
        ytd_run_totals: {
          count: stats.ytd_run_totals.count,
          distance_in_miles: stats.ytd_run_totals.distance_in_miles_s,
          pace_per_mile: stats.ytd_run_totals.pace_per_mile_s,
          elapsed_time_in_hours: stats.ytd_run_totals.elapsed_time_in_hours_s
        },
        all_run_totals: {
          count: stats.all_run_totals.count,
          distance_in_miles: stats.all_run_totals.distance_in_miles_s,
          pace_per_mile: stats.all_run_totals.pace_per_mile_s,
          elapsed_time_in_hours: stats.all_run_totals.elapsed_time_in_hours_s
        },
        ytd_ride_totals: {
          count: stats.ytd_ride_totals.count,
          distance_in_miles: stats.ytd_ride_totals.distance_in_miles_s,
          pace_per_mile: stats.ytd_ride_totals.pace_per_mile_s,
          elapsed_time_in_hours: stats.ytd_ride_totals.elapsed_time_in_hours_s
        },
        all_ride_totals: {
          count: stats.all_ride_totals.count,
          distance_in_miles: stats.all_ride_totals.distance_in_miles_s,
          pace_per_mile: stats.all_ride_totals.pace_per_mile_s,
          elapsed_time_in_hours: stats.all_ride_totals.elapsed_time_in_hours_s
        }
      }
      File.write(File.expand_path('../_data/strava_stats.yml', __dir__), data.to_yaml)
    end

    def import_recent_activities
      @client.athlete_activities.map do |activity|
        import_activity(activity) unless post_exists?(activity) && post_old_enough?(activity)
      end
    end

    def import_all_activities
      @client.athlete_activities(per_page: 100) do |activity|
        import_activity(activity) unless post_exists?(activity) && post_old_enough?(activity)
      end
    end

    def post_exists?(activity)
      site.posts.docs.any? do |post|
        next false unless post.data['strava_activity_url']

        post.data['strava_activity_url'] == activity.strava_url
      end
    end

    def post_old_enough?(activity)
      activity.start_date < case activity.sport_type
                            when 'Hike'
                              # give me a day to write up a hike
                              (Time.now - (24 * 60 * 60))
                            else
                              # give me 6 hours to write up a run or ride or whatever
                              (Time.now - (6 * 60 * 60))
                            end
    end

    def import_activity(partial_activity)
      puts "Importing activity #{partial_activity.id}"
      activity = client.activity(partial_activity.id)
      image = nil
      if activity.total_photo_count.positive?
        photo = client.activity_photos(activity.id).first
        # urls is a hash with keys of image width
        # choose the largest image
        asset = Asset.new(url: photo.urls[photo.urls.keys.max], category: 'images')
        asset.download
        image = asset.public_path
      end
      post = Post.new(
        title: "#{activity.name} #{activity.sport_type_emoji}",
        body: post_body(activity),
        date: activity.start_date,
        strava_activity_url: activity.strava_url,
        layout: 'Exercise',
        category: 'exercise',
        tags: [sport_type_tag(activity.sport_type)],
        slug: activity.id,
        image: image,
        exercise_data: exercise_data(activity)
      )
      post.create_file
    end

    def post_body(activity)
      location = if activity.segment_efforts.any?
                   effort = activity.segment_efforts.first
                   "#{effort.segment.city}, #{effort.segment.state}, #{effort.segment.country} (#{effort.name})"
                 elsif activity.start_latlng.any?
                   reverse_geocode(activity.start_latlng[0], activity.start_latlng[1])
                 else
                   'Unknown location (probably inside)'
                 end
      <<~BODY
        #{activity.description}

        #{location}
      BODY
    end

    def exercise_data(activity)
      data = {
        emoji: activity.sport_type_emoji,
        external_id: activity.external_id,
        average_heartrate: "#{activity.average_heartrate}bpm",
        max_heartrate: "#{activity.max_heartrate}bpm",
        average_watts: "#{activity.average_watts}W",
        max_watts: "#{activity.max_watts}W",
        distance_in_miles: activity.distance_in_miles_s,
        pace_per_mile: activity.pace_per_mile_s,
        elevation_high: "#{activity.elev_high}m",
        elevation_low: "#{activity.elev_low}m",
        moving_time_in_hours_s: activity.moving_time_in_hours_s,
        elapsed_time_in_hours_s: activity.elapsed_time_in_hours_s,
        total_elevation_gain_in_feet: activity.total_elevation_gain_in_feet_s,
        end_latlng: activity.end_latlng,
        start_latlng: activity.start_latlng,
        similar_activities_count: activity.similar_activities&.effort_count,
        similar_activities_trend: activity.similar_activities&.trend&.direction,
        mapbox_image_url: mapbox_image_url(activity)
      }
      if activity.start_latlng&.any?
        weather = fetch_weather_conditions(activity)
        data[:weather] = weather if weather
      end
      data
    end

    private

    def sport_type_tag(type)
      case type
      when 'Run'
        'running'
      when 'Ride'
        'cycling'
      when 'Swim'
        'swimming'
      when 'WeightTraining'
        'weight-training'
      when 'Walk'
        'walking'
      when 'Hike'
        'hiking'
      when 'AlpineSki'
        'skiing'
      when 'Snowboard'
        'snowboarding'
      when 'NordicSki'
        'cross-country-skiing'
      when 'Rowing'
        'rowing'
      when 'Elliptical'
        'elliptical'
      else
        type.downcase
      end
    end

    def token
      uri = URI.parse('https://joshbeckman-stravaoauthclient.web.val.run/token')
      request = Net::HTTP::Get.new(uri)
      request.content_type = 'application/json'
      req_options = {
        use_ssl: uri.scheme == 'https'
      }
      res = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
        http.request(request)
      end

      unless res.is_a?(Net::HTTPSuccess)
        puts res.body
        raise Error, 'Token refresh request failed'
      end

      resp_body = JSON.parse(res.body)
      resp_body['access_token']
    end

    def mapbox_token
      @mapbox_token ||= ENV['MAPBOX_TOKEN'] || (
        File.exist?(File.expand_path('.mapbox_token')) ? File.read(File.expand_path('.mapbox_token')).strip : nil)
    end
  end
end

strava = PESOS::Strava.new
strava.import_recent_activities
