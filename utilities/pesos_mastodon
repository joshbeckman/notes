#!/usr/bin/env ruby
# frozen_string_literal: true

require 'jekyll'
require 'json'
require 'net/http'
require 'time'
require_relative 'models/post'
require_relative 'models/asset'

module PESOS
  class Mastodon
    class Error < StandardError; end

    attr_reader :site

    def initialize
      @site = Jekyll::Site.new(Jekyll.configuration({}))
      @site.read
    end

    def import_replies
      replies = outbox['orderedItems'].filter do |item|
        next false if item['type'] == 'Announce'

        item.dig('object', 'inReplyTo')
      end
      replies.each { |reply| import_reply(reply) }
    end

    def import_posts
      posts = outbox['orderedItems'].filter do |item|
        next false if item['type'] == 'Announce'
        next false if item.dig('object', 'inReplyTo')
        next false if post_exists?(item['object']['url'])

        true
      end
      posts.each { |post| import_post(post) }
    end

    def post_exists?(url)
      site.posts.docs.any? do |post|
        post.data['mastodon_social_status_url'] == url
      end
    end

    def import_reply(reply)
      title = reply['object']['summary'] || "Reply to #{find_mention_handle(reply['object']['tag'])}"
      image = find_image(reply['object']['attachment'])
      post = Post.new(
        body: post_body(reply),
        category: 'replies',
        date: Time.parse(reply['published']),
        in_reply_to: reply['object']['inReplyTo'],
        mastodon_social_status_url: reply['object']['url'],
        canonical: reply['object']['url'],
        image: image,
        slug: reply['object']['id'].split('/').last,
        tags: ['mastodon'],
        title: title
      )
      post.create_file
    end

    def import_post(post)
      image = find_image(post['object']['attachment'])
      canonical = nil
      bluesky_status_url = false
      # lock it down to mastodon if directed at another user
      if find_mention_handle(post['object']['tag'])
        canonical = post['object']['url']
        bluesky_status_url = nil
      end
      post = Post.new(
        body: post_body(post),
        category: 'blog',
        date: Time.parse(post['published']),
        mastodon_social_status_url: post['object']['url'],
        bluesky_status_url: bluesky_status_url,
        canonical: canonical,
        image: image,
        slug: post['object']['id'].split('/').last
      )
      post.title = post.suggested_title || "Post to #{find_mention_handle(post['object']['tag'])}"
      post.tags = (post.suggested_tags || []).push('mastodon').uniq
      post.create_file
    end

    def post_body(post)
      video = find_video(post['object']['attachment'])
      if video
        "#{post['object']['content']}\n\n#{video}"
      else
        post['object']['content']
      end
    end

    def find_mention_handle(tags)
      return 'Mastodon' if tags.nil?

      mention = tags.find { |tag| tag['type'] == 'Mention' }
      return 'Mastodon' if mention.nil?

      mention['name']
    end

    def find_image(attachments)
      return nil if attachments.nil?

      image = attachments.find { |attachment| attachment['mediaType']&.include?('image') }
      return nil if image.nil?

      asset = Asset.new(url: image['url'], category: 'images')
      asset.download
      asset.public_path
    end

    def find_video(attachments)
      return nil if attachments.nil?

      video = attachments.find { |attachment| attachment['mediaType']&.include?('video') }
      return nil if video.nil?

      asset = Asset.new(url: video['url'], category: 'videos')
      asset.download
      asset.standalone_md
    end

    def outbox
      uri = URI.parse('https://mastodon.social/users/joshbeckman/outbox?page=true')
      req = Net::HTTP::Get.new(uri)
      req['Accept'] = 'application/activity+json'
      req['Content-Type'] = 'application/json'
      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        http.request(req)
      end

      raise Error, 'Outbox request failed' unless res.is_a?(Net::HTTPSuccess)

      JSON.parse(res.body)
    end
  end
end

mastodon = PESOS::Mastodon.new
mastodon.import_replies
mastodon.import_posts
