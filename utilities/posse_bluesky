#!/usr/bin/env ruby
# frozen_string_literal: true

require 'jekyll'
require 'json'
require 'net/http'
require 'uri'
require 'open-uri'
require_relative 'bluesky/auth'

# TODO: post full contents if they fit 300chars
# TODO: maybe thread text-only posts?
#
# TODO: link/facet to handles if present
#
# TODO: reply in thread if reply_to is present and is a bluesky URL
#
# TODO: get reply/boost/fav counts and update post

module POSSE
  # a Jekyll filter class to use Jekyll filters in a non-Jekyll context
  class JekyllFilter
    include Jekyll::Filters
    attr_accessor :site, :context

    def initialize(opts = {})
      @site = Jekyll::Site.new(Jekyll.configuration(opts))
      @context = Liquid::Context.new(@site.site_payload, {}, site: @site)
    end
  end

  # a class to post to bluesky.social
  class Bluesky
    include ::Bluesky::Auth

    class Error < StandardError; end

    attr_reader :site

    def initialize
      @site = Jekyll::Site.new(Jekyll.configuration({}))
      @site.read
      @jekyll_filter = JekyllFilter.new
      @content_template = Liquid::Template.parse('{{ x | strip_html | strip | escape | truncate: 140}}')
      @handle = ENV.fetch('BLUESKY_HANDLE', 'joshbeckman.org')
      @did = generate_did(@handle)
      @api_key = generate_api_key(@did, ENV.fetch('BLUESKY_PASSWORD', nil))
    end

    def post_all
      site.posts.docs.each do |post|
        post(post) if should_post?(post) && available?(post)
      end
    end

    def post(post)
      puts "Posting: #{url(post)}"
      title = if post.data['hide_title']
               nil
             else
               post.data['title']
             end
      message = [
        url(post),
        title,
        excerpt(post),
      ].compact.join("\n\n")
      status = post_status(message, post)
      puts "Posted:  #{url(post)} to #{status['url']}"
      bluesky_status_url = status['url']
      save_status(post, bluesky_status_url)
    end

    def save_status(post, bluesky_status_url)
      post_path = post.path
      post_content = File.read(post_path)
      new_post_content = post_content.gsub(
        /^bluesky_status_url: .*/,
        "bluesky_status_url: #{bluesky_status_url}"
      )
      File.write(post_path, new_post_content)
    end

    private

    def available?(post)
      uri = URI.parse(url(post))
      request = Net::HTTP::Get.new(uri)
      req_options = {
        use_ssl: uri.scheme == 'https'
      }
      res = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
        http.request(request)
      end
      return true if res.is_a?(Net::HTTPSuccess)

      false
    end

    def should_post?(post)
      posted_url = post.data['bluesky_status_url']
      !posted_url.nil? && !(posted_url || '').match?(%r{https\S*/\d+})
    end

    def post_status(status, post)
      uri = URI.parse('https://bsky.social/xrpc/com.atproto.repo.createRecord')
      request = Net::HTTP::Post.new(uri)
      request.content_type = 'application/json'
      request['Authorization'] = "Bearer #{@api_key}"
      request.body = JSON.dump({
                                 'collection' => 'app.bsky.feed.post',
                                 'repo' => @did,
                                 'record' => {
                                   'text' => status,
                                   'facets' => parse_facets(status),
                                   'embed' => embed(post),
                                   'createdAt' => Time.now.strftime('%Y-%m-%dT%H:%M:%S.%3NZ'),
                                   '$type' => 'app.bsky.feed.post'
                                 }
                               })
      req_options = {
        use_ssl: uri.scheme == 'https'
      }
      res = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
        http.request(request)
      end

      unless res.is_a?(Net::HTTPSuccess)
        puts res.body
        raise Error, 'Status post request failed'
      end

      resp_body = JSON.parse(res.body)
      resp_body['url'] = "https://bsky.app/profile/#{@handle}/post/#{resp_body['uri'].split('/').last}"
      resp_body
    end

    def embed(post)
      card = {
        uri: url(post),
        title: post.data['title'],
        description: excerpt(post)
      }
      card['thumb'] = image_blob(post) if post.data['image']
      {
        '$type': 'app.bsky.embed.external',
        external: card
      }
    end

    def image_blob(post)
      image_path = post.data['image']
      if image_path.start_with?('http')
        image_path = URI.parse(image_path)
        image_path = File.join(Dir.tmpdir, File.basename(image_path.path))
        File.binwrite(image_path, URI.open(post.data['image']).read)
      else
        image_path = File.join('.', image_path)
      end
      filetype = `file --mime-type -b #{image_path}`.strip
      uri = URI.parse('https://bsky.social/xrpc/com.atproto.repo.uploadBlob')
      request = Net::HTTP::Post.new(uri)
      request.content_type = filetype
      request['Authorization'] = "Bearer #{@api_key}"
      request.body = File.binread(compress_image(image_path))
      req_options = {
        use_ssl: uri.scheme == 'https'
      }
      res = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
        http.request(request)
      end
      raise Error, 'Image blob post request failed' unless res.is_a?(Net::HTTPSuccess)

      JSON.parse(res.body)['blob']
    end

    def compress_image(image_path)
      # create a local temp image with the same filename and a random prefix
      file_name = File.basename(image_path)
      temp_image_path = File.join('.', "#{rand(36**8).to_s(36)}_#{file_name}")
      `convert #{image_path} -strip -resize 800x800 -define jpeg:extent=500kb #{temp_image_path}`
      temp_image_path
    end

    def url(post)
      "#{site.config['url']}#{post.url}"
    end

    def parse_mentions(text)
      spans = []
      # regex based on: https://atproto.com/specs/handle#handle-identifier-syntax
      mention_regex = /[$|\W](@([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)/

      text_bytes = text.encode('UTF-8')
      text_bytes.scan(mention_regex) do |match|
        spans << {
          start: $LAST_MATCH_INFO.offset(1).first,
          end: $LAST_MATCH_INFO.offset(1).last,
          handle: match[0][1..]
        }
      end
      spans
    end

    def parse_urls(text)
      text_bytes = text.encode('UTF-8')
      URI.extract(text, %w[http https]).map do |url|
        {
          start: text_bytes.index(url),
          end: text_bytes.index(url) + url.length,
          url: url
        }
      end
    end

    def parse_facets(text)
      facets = []
      parse_mentions(text).each do |m|
        uri = URI('https://bsky.social/xrpc/com.atproto.identity.resolveHandle')
        params = { handle: m[:handle] }
        uri.query = URI.encode_www_form(params)
        response = Net::HTTP.get_response(uri)
        next if response.code.to_i == 400

        did = JSON.parse(response.body)['did']
        facets << {
          index: {
            byteStart: m[:start],
            byteEnd: m[:end]
          },
          features: [{ '$type': 'app.bsky.richtext.facet#mention', did: did }]
        }
      end

      parse_urls(text).each do |u|
        facets << {
          index: {
            byteStart: u[:start],
            byteEnd: u[:end]
          },
          features: [
            {
              '$type': 'app.bsky.richtext.facet#link',
              # NOTE: URI ("I") not URL ("L")
              uri: u[:url]
            }
          ]
        }
      end
      facets
    end

    def excerpt(post)
      post.data['description'] ||
        @content_template.render('x' => @jekyll_filter.markdownify(post.content))
    end
  end
end

POSSE::Bluesky.new.post_all
