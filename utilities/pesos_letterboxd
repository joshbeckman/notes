#!/usr/bin/env ruby
# frozen_string_literal: true

require 'jekyll'
require 'rexml/document'
require 'net/http'
require 'time'
require_relative 'models/post'
require_relative 'models/asset'

# TODO: get the IMDB ID from the film page
#   pull the film name/slug out of the item link
#   GET the film page content at https://letterboxd.com/film/<slug>
#   find in the HTML the IMDB URL that starts with http://www.imdb.com/title/<id>

module PESOS
  class Letterboxd
    class Error < StandardError; end

    attr_reader :site

    def initialize
      @site = Jekyll::Site.new(Jekyll.configuration({}))
      @username = ENV.fetch('LETTERBOXD_USERNAME', 'joshbeckman')
      @site.read
    end

    def import_posts
      posts = outbox.filter do |item|
        next false if post_exists?(item['link'])

        true
      end
      posts.each { |post| import_post(post) }
    end

    def post_exists?(url)
      site.posts.docs.any? do |post|
        post.data['letterboxd_review_url'] == url
      end
    end

    def import_post(post)
      title = post['filmTitle']
      image = find_image(post['description'])
      letterboxd_id = post['link'].split('/').last
      slug = "#{post['guid']}-#{letterboxd_id}"
      post = Post.new(
        body: post['description'],
        category: 'blog/watching',
        date: Time.parse(post['watchedDate']),
        letterboxd_review_url: post['link'],
        tmdb_id: post['movieId'],
        letterboxd_id: letterboxd_id,
        bluesky_status_url: false,
        mastodon_social_status_url: false,
        image: image,
        slug: slug,
        tags: %w[letterboxd movies],
        title: title,
        rating: post['memberRating'].to_i
      )
      post.create_file
    end

    def find_image(description)
      return nil if description.nil?

      image = description.scan(/<img src="([^"]+)"/)
      return nil if image.empty?

      image.first.first
    end

    def outbox
      uri = URI.parse("https://letterboxd.com/#{@username}/rss/")
      req = Net::HTTP::Get.new(uri)
      req['Accept'] = 'application/rss+xml'
      res = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        http.request(req)
      end

      unless res.is_a?(Net::HTTPSuccess)
        puts res.body
        raise Error, 'Outbox request failed'
      end

      REXML::Document.new(res.body).elements['rss/channel'].elements.map do |item|
        next unless item.name == 'item'

        item.elements.each_with_object({}) do |element, hash|
          hash[element.name] = element.text
        end
      end.compact
    end
  end
end

letterbox = PESOS::Letterboxd.new
letterbox.import_posts
