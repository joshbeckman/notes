#!/usr/bin/env ruby

require 'json'
require 'readwise'
require 'time'
require 'uri'

class Jekyll
  def self.import_book(book)
    return unless book.should_import?

    File.open("notes/_posts/#{book.formatted_date}-#{book.book_id}.md", 'w') do |f|
      f.write book.post_text
    end
  end

  def self.import_book_highlights(book)
    book.highlights.each do |highlight|
      import_highlight(highlight, book)
    end
  end

  def self.import_highlight(highlight, book)
    return unless highlight.should_import?(book)

    File.open("notes/_posts/#{highlight.formatted_date}-#{highlight.highlight_id}.md", 'w') do |f|
      f.write highlight.post_text(book)
    end
  end

  def self.import_reading_list(inbox_month: [], archive_month: [])
    file = File.open('blog/reading/reading_list.md', 'w')
    file.puts '---'
    file.puts 'layout: Page'
    file.puts 'title: Reading List'
    file.puts 'toc: true'
    file.puts 'emoji: üìö'
    file.puts 'searchable: true'
    file.puts 'categories:'
    file.puts '- blog'
    file.puts 'tags:'
    file.puts '- index'
    file.puts '---'
    file.puts 'I generate this page from my Readwise library using [a script I wrote](/TODO). Feel free to use it, too!'
    file.puts
    file.puts '## Archive'
    file.puts "This is a list of the #{archive_month.count} articles/etc. that I read in the last month."
    file.puts
    file.puts '| Title | Author |'
    file.puts '| ------ | ----- |'
    archive_month.each do |doc|
      # TODO: match each against a highlight and link to it if found
      title = doc.title
      author = doc.author
      email = doc.source_url.match?(/^mailto:/)
      unless doc.source_url.match?(/^mailto:/)
        title = "[#{title}](#{doc.source_url})"
      end
      if email && author.nil?
        author = "(newsletter)"
      end
      file.puts "| #{title&.gsub('|', '')} | #{author&.gsub('|', '')} |"
    end
    file.puts
    file.puts '## Inbox'
    file.puts "This is a list of the #{inbox_month.count} articles/etc. that I added to my reading list queue in the last month."
    file.puts
    file.puts '| Title | Author | Read in app |'
    file.puts '| ------ | ----- | ----- |'
    inbox_month.each do |doc|
      site_name = doc.site_name
      email = doc.source_url.match?(/^mailto:/)
      unless doc.source_url.match?(/^mailto:/)
        title = "[#{title}](#{doc.source_url})"
      end
      if email && site_name.nil?
        site_name = "(newsletter)"
      end
      file.puts "| #{title&.gsub('|', '')} | #{site_name&.gsub('|', '')} | [Read](#{doc.url}) |"
    end
  end
end

module ReadwiseExtras
  module Book
    def has_image?
      cover_image_name && download_image
    end

    def download_image
      return false unless cover_image_name
      return true if File.exist?(cover_image_name)

      system "curl '#{cover_image_url}' -o #{cover_image_name}"
    end

    def cleanup_image
      return true unless has_image?

      system "rm #{cover_image_name}"
    end

    def cover_image_name
      return if cover_image_url.nil?

      extension = URI.parse(cover_image_url).path.split('/').last.match(/\.[a-z|A-Z]*$/)&.to_a&.first || '.jpg'
      book_id + extension
    end

    def post_text
      [
        "---",
        "title: \"#{stripped_title}\"",
        "tags: #{formatted_tags}",
        "canonical: #{source_url}",
        "author: #{author_stripped}",
        "book: #{book_id}",
        "book_title: \"#{stripped_title}\"",
        "book_asin: #{asin}",
        "hide_title: true",
        "readwise_url: #{readwise_url}",
        "image: #{cover_image_url}",
        "favicon_url: #{favicon_url}",
        "source_emoji: #{source_emoji}",
        "show_book_meta: true",
        (navigable_url? ? "source_url: \"#{outbound_url(text_fragment: title)}\"" : nil),
        "---",
        "",
        note,
      ].compact.join("\n")
    end

    def formatted_tags
      base_tags = tags.map { |t| t['name'] }
      base_tags.concat(highlights.map { |h| h.tags.map { |ht| ht['name'] } })
        .flatten.uniq.join(' ')
    end

    def formatted_date
      highlighted_at_time.to_date.to_s
    end

    def stripped_title
      @stripped_title ||= readable_title.gsub('"', "'")
    end

    def should_import?
      return true if note&.length&.positive?

      false
    end

    def navigable_url?
      return true if source_url && !source_url.match?(/^mailto:/)

      false
    end

    # Ref: https://developer.mozilla.org/en-US/docs/Web/Text_fragments
    def outbound_url(text_fragment: nil)
      return source_url unless text_fragment

      text_start = text_fragment.unicode_normalize.split("\n").first.split("[").first.split(" ").first(10).join(" ").strip
      fragment = ":~:text=" + URI.encode_uri_component(text_start)
      begin
        parsed_url = URI.parse(source_url)
        parsed_url.fragment = "#{parsed_url.fragment}#{fragment}"
        parsed_url.to_s
      rescue URI::InvalidURIError
        "#{source_url.split('#').first}##{fragment}"
      end
    end

    def asin_url
      return nil unless asin

      "https://www.amazon.com/foo/dp/#{asin}/"
    end

    def author_stripped
      author.to_s.split("\n").reject { |a| a.empty? }.join(" ")
    end

    def source_emoji
      if source_url&.match?(/^mailto:/)
        "‚úâÔ∏è"
      elsif category == 'books' || category == 'supplementals'
        "üìï"
      else
        "üåê"
      end
    end

    def favicon_url
      return nil unless source_url&.match?(/^https{0,1}:\/\//)

      hostname = URI.parse(source_url).hostname
      return nil unless hostname

      "https://s2.googleusercontent.com/s2/favicons?domain=#{hostname}"
    end

    def source_footer(text_fragment: nil)
      <<~FOOTER
        <div class="quoteback-footer">#{source_footer_avatar.strip}<div class="quoteback-metadata"><div class="metadata-inner"><div aria-label="#{author_stripped}" class="quoteback-author">#{author_stripped}</div><div aria-label="#{stripped_title}" class="quoteback-title">#{stripped_title}</div></div></div>#{source_footer_link(text_fragment: text_fragment).strip}</div>
      FOOTER
    end

    def source_footer_avatar
      unless favicon_url
        return <<~AVATAR
          <div class="quoteback-avatar"><span class="mini-emoji">#{source_emoji}</span></div>
        AVATAR
      end

      <<~AVATAR
        <div class="quoteback-avatar"><img class="mini-favicon" src="#{favicon_url}"></div>
      AVATAR
    end

    def source_footer_link(text_fragment: nil)
      return "" unless navigable_url?

      <<~LINK
       <div class="quoteback-backlink"><a target="_blank" aria-label="go to the full text of this quotation" rel="noopener" href="#{outbound_url(text_fragment: text_fragment)}" class="quoteback-arrow">Source</a></div>
      LINK
    end
  end

  module Highlight
    def post_text(book)
      [
        "---",
        "title: \"#{title}...\"",
        "tags: #{formatted_tags(book)}",
        "canonical: #{book.source_url}",
        "author: #{book.author_stripped}",
        "book: #{book.book_id}",
        "book_title: \"#{book.stripped_title}\"",
        "book_asin: #{book.asin}",
        "hide_title: true",
        "readwise_url: #{readwise_url}",
        "image: #{book.cover_image_url}",
        "favicon_url: #{book.favicon_url}",
        "source_emoji: #{book.source_emoji}",
        (book.navigable_url? ? "source_url: \"#{book.outbound_url(text_fragment: title)}\"" : nil),
        "---",
        "",
        formatted_text(book),
      ].compact.join("\n")
    end

    def title
      @title ||= text.gsub(/\]\(\S*\)/, "]").gsub('"', "'").split("\n").join(' ').slice(0, 60)
    end

    def formatted_tags(book)
      base_tags = tags.map { |t| t['name'] }
      base_tags << 'inbox' if base_tags.empty?
      base_tags.flatten.join(' ')
    end

    def formatted_text(book)
      # split text by newline and add a '> ' to each line
      pieces = text.split("\n").map do |t|
        "> #{t}"
      end
      pieces << "> #{book.source_footer(text_fragment: title).strip}"
      unless note.nil? || note.empty?
        pieces << ""
        pieces << note
      end

      pieces.join("\n")
    end

    def formatted_date
      Time.parse(highlighted_at || updated_at).to_date.to_s
    end

    def should_import?(book)
      return false if book.category == "supplementals" && tags.empty?
      return false if tags.map { |t| t['name'] }.include?("discard")

      true
    end
  end
end
Readwise::Book.include(ReadwiseExtras::Book)
Readwise::Highlight.include(ReadwiseExtras::Highlight)


# Steps:
# - Import highlights into notes/_posts
class Importer
  def self.import
    client = Readwise::Client.new(token: ENV['READWISE_TOKEN'])
    limit = ENV['READWISE_LIMIT']&.to_i
    books = client.export(updated_after: Time.parse("2000-01-01").iso8601)
    books = books.sample(limit) if limit
    books.each do |book|
      Jekyll.import_book(book)
      Jekyll.import_book_highlights(book)
    end
    month_ago = Date.today.prev_month.to_time
    new_docs = client.get_documents(location: 'new', updated_after: month_ago.iso8601)
    archive_docs = client.get_documents(location: 'archive', updated_after: month_ago.iso8601)
    Jekyll.import_reading_list(inbox_month: new_docs, archive_month: archive_docs)
  end

  def self.clean_posts
    system 'rm notes/_posts/*.md'
    system 'git checkout -- notes/_posts'
  end
end

Importer.import
