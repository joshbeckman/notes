#!/usr/bin/env ruby
# frozen_string_literal: true

require 'jekyll'
require 'json'
require 'readwise'
require 'time'
require 'uri'

module ReadwiseExtras
  class Jekyll
    class Error < StandardError; end

    attr_reader :site

    def initialize
      @site = ::Jekyll::Site.new(::Jekyll.configuration({}))
      @site.read
    end

    def should_import_book?(book)
      book_post = site.posts.docs.find do |post|
        post.data['book_id'] == book.book_id
      end
      return false if book_post && book_post.data['forked']

      book.should_import?
    end

    def should_import_highlight?(highlight, book)
      highlight_post = site.posts.docs.find do |post|
        post.data['highlight_id'] == highlight.highlight_id
      end
      return false if highlight_post && highlight_post.data['forked']

      highlight.should_import?(book)
    end

    def should_import_document?(doc)
      doc_post = site.posts.docs.find do |post|
        post.data['document_id'] == doc.id
      end
      return false if doc_post && doc_post.data['forked']

      doc.notes&.length&.positive? && !doc.notes.match?(/^ignore$/i)
    end

    def import_book(book)
      return unless should_import_book?(book)

      File.write("notes/_posts/#{book.formatted_date}-#{book.book_id}.md", book.post_text)
    end

    def import_book_highlights(book)
      book.highlights.each do |highlight|
        import_highlight(highlight, book)
      end
    end

    def import_highlight(highlight, book)
      return unless should_import_highlight?(highlight, book)

      File.write("notes/_posts/#{highlight.formatted_date}-#{highlight.highlight_id}.md", highlight.post_text(book))
    end

    def import_document(doc)
      return unless should_import_document?(doc)

      File.write("notes/_posts/#{doc.formatted_date}-#{doc.id}.md", doc.post_text)
    end
  end
end

module ReadwiseExtras
  module Document
    def post_text
      [
        '---',
        "title: \"#{combined_title}\"",
        "tags: #{formatted_tags}",
        "canonical: #{source_url}",
        "author: #{author_stripped}",
        "author_id: #{author_id}",
        "book: #{id}",
        "book_title: \"#{stripped_title}\"",
        "readwise_url: #{url}",
        "image: #{image_url}",
        "favicon_url: #{favicon_url}",
        "source_emoji: #{source_emoji}",
        'show_book_meta: true',
        'hide_title: true',
        (navigable_url? ? "source_url: \"#{source_url}\"" : nil),
        '---',
        '',
        notes
      ].compact.join("\n")
    end

    def combined_title
      "#{stripped_title} via #{author_stripped}"
    end

    def author_id
      @author_id ||= Digest::MD5.hexdigest(author_stripped)
    end

    def author_stripped
      @author_stripped ||= author.to_s.split("\n").reject(&:empty?).join(' ')
    end

    def stripped_title
      @stripped_title ||= title.gsub('"', "'")
    end

    def formatted_tags
      base_tags = tags.map { |t| t['name'] }
      base_tags << 'inbox' if base_tags.empty?
      base_tags.flatten.join(' ')
    end

    def formatted_date
      Time.parse(created_at).to_date.to_s
    end

    def source_emoji
      if source_url&.match?(/^mailto:/)
        '✉️'
      elsif %w[books supplementals].include?(category)
        '📕'
      else
        '🌐'
      end
    end

    def navigable_url?
      return true if source_url && !source_url.match?(/^mailto:/)

      false
    end

    def favicon_url
      return nil unless source_url&.match?(%r{^https{0,1}://})

      hostname = URI.parse(source_url).hostname
      return nil unless hostname

      "https://s2.googleusercontent.com/s2/favicons?domain=#{hostname}"
    end
  end

  module Book
    def post_text
      [
        '---',
        "title: \"#{combined_title}\"",
        "tags: #{formatted_tags}",
        "canonical: #{source_url}",
        "author: #{author_stripped}",
        "author_id: #{author_id}",
        "book: #{book_id}",
        "book_title: \"#{stripped_title}\"",
        (asin.nil? ? nil : "book_asin: #{asin}"),
        "readwise_url: #{readwise_url}",
        "image: #{filtered_cover_image_url}",
        "favicon_url: #{favicon_url}",
        "source_emoji: #{source_emoji}",
        'show_book_meta: true',
        (navigable_url? ? "source_url: \"#{outbound_url}\"" : nil),
        '---',
        '',
        note
      ].compact.join("\n")
    end

    def filtered_cover_image_url
      return nil if cover_image_url.nil?
      return nil if cover_image_url.match?(/readwise-assets.*default-book-icon/)
      return nil if cover_image_url.match?(/readwise-assets.*article\d\./)

      cover_image_url
    end

    def formatted_tags
      base_tags = tags.map { |t| t['name'] }
      base_tags.concat(highlights.map { |h| h.tags.map { |ht| ht['name'] } })
               .flatten.uniq.join(' ')
    end

    def formatted_date
      highlighted_at_time.to_date.to_s
    end

    def combined_title
      "#{stripped_title} via #{author_stripped}"
    end

    def stripped_title
      @stripped_title ||= readable_title.gsub('"', "'")
    end

    def should_import?
      return false if note == '0'
      return true if note&.length&.positive?

      false
    end

    def navigable_url?
      return true if source_url && !source_url.match?(/^mailto:/)

      false
    end

    # Ref: https://developer.mozilla.org/en-US/docs/Web/Text_fragments
    def outbound_url(text_fragment: nil)
      return source_url unless text_fragment

      fragment = build_text_fragment(text_fragment)
      begin
        parsed_url = URI.parse(source_url)
        parsed_url.fragment = "#{parsed_url.fragment}#{fragment}"
        parsed_url.to_s
      rescue URI::InvalidURIError
        "#{source_url.split('#').first}##{fragment}"
      end
    end

    def build_text_fragment(text)
      text_start = text.unicode_normalize.split("\n").first.split('[').first.split.first(3).join(' ').strip
      text_end = text.unicode_normalize.split("\n").last.split(']').last.split.last(3).join(' ').strip
      ":~:text=#{URI.encode_uri_component(text_start)},#{URI.encode_uri_component(text_end)}"
    end

    def asin_url
      return nil unless asin

      "https://www.amazon.com/foo/dp/#{asin}/"
    end

    def author_id
      @author_id ||= Digest::MD5.hexdigest(author_stripped)
    end

    def author_stripped
      @author_stripped ||= author.to_s.split("\n").reject(&:empty?).join(' ')
    end

    def source_emoji
      if source_url&.match?(/^mailto:/)
        '✉️'
      elsif %w[books supplementals].include?(category)
        '📕'
      else
        '🌐'
      end
    end

    def favicon_url
      return nil unless source_url&.match?(%r{^https{0,1}://})

      hostname = URI.parse(source_url).hostname
      return nil unless hostname

      "https://s2.googleusercontent.com/s2/favicons?domain=#{hostname}"
    end

    def source_footer(text_fragment: nil)
      <<~FOOTER
        <div class="quoteback-footer">#{source_footer_avatar.strip}<div class="quoteback-metadata"><div class="metadata-inner"><span style="display:none">FROM:</span><div aria-label="#{author_stripped}" class="quoteback-author"> #{author_stripped}</div><div aria-label="#{stripped_title}" class="quoteback-title"> #{stripped_title}</div></div></div>#{source_footer_link(text_fragment: text_fragment).strip}</div>
      FOOTER
    end

    def source_footer_avatar
      unless favicon_url
        return <<~AVATAR
          <div class="quoteback-avatar"><span class="mini-emoji"> #{source_emoji}</span></div>
        AVATAR
      end

      <<~AVATAR
        <div class="quoteback-avatar"><img class="mini-favicon" src="#{favicon_url}"></div>
      AVATAR
    end

    def source_footer_link(text_fragment: nil)
      return '' unless navigable_url?

      <<~LINK
        <div class="quoteback-backlink"><a target="_blank" aria-label="go to the full text of this quotation" rel="noopener" href="#{outbound_url(text_fragment: text_fragment)}" class="quoteback-arrow"> Source</a></div>
      LINK
    end
  end

  module Highlight
    def post_text(book)
      [
        '---',
        "title: \"#{title(book)}\"",
        "tags: #{formatted_tags(book)}",
        "canonical: #{book.source_url}",
        "author: #{book.author_stripped}",
        "author_id: #{book.author_id}",
        "book: #{book.book_id}",
        "book_title: \"#{book.stripped_title}\"",
        (book.asin.nil? ? nil : "book_asin: #{book.asin}"),
        'hide_title: true',
        "highlight_id: #{highlight_id}",
        "readwise_url: #{readwise_url}",
        "image: #{book.filtered_cover_image_url}",
        "favicon_url: #{book.favicon_url}",
        "source_emoji: #{book.source_emoji}",
        (book.navigable_url? ? "source_url: \"#{book.outbound_url(text_fragment: text)}\"" : nil),
        '---',
        '',
        formatted_text(book)
      ].compact.join("\n")
    end

    def title(book)
      @title ||= "Note on #{book.combined_title}"
    end

    def formatted_tags(_book)
      base_tags = tags.map { |t| t['name'] }
      base_tags << 'inbox' if base_tags.empty?
      base_tags.flatten.join(' ')
    end

    def formatted_text(book)
      # split text by newline and add a '> ' to each line
      pieces = text.split("\n").map do |t|
        "> #{t}"
      end
      pieces << "> #{book.source_footer(text_fragment: text).strip}"
      unless note.nil? || note.empty?
        pieces << ''
        pieces << note
      end

      pieces.join("\n")
    end

    def formatted_date
      Time.parse(highlighted_at || updated_at).to_date.to_s
    end

    def should_import?(book)
      return false if book.category == 'supplementals' && tags.empty?
      return false if tags.map { |t| t['name'] }.include?('discard')

      true
    end
  end
end
Readwise::Book.include(ReadwiseExtras::Book)
Readwise::Document.include(ReadwiseExtras::Document)
Readwise::Highlight.include(ReadwiseExtras::Highlight)

# Steps:
# - Import highlights into notes/_posts
class Importer
  def self.import
    client = Readwise::Client.new(token: ENV.fetch('READWISE_TOKEN', nil))
    jekyll = ReadwiseExtras::Jekyll.new

    updated_after = Date.today.prev_year.to_time
    books = client.export(updated_after: updated_after.iso8601)
    books.each do |book|
      jekyll.import_book_highlights(book)
    end

    docs = client.get_documents(location: 'archive', updated_after: updated_after.iso8601)
    docs.each do |doc|
      jekyll.import_document(doc)
    end
  end

  def self.wipe_posts
    system 'rm notes/_posts/[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9]*.md'
  end

  def self.reset_posts
    wipe_posts
    system 'git checkout -- notes/_posts'
  end
end

# Importer.wipe_posts
Importer.import
