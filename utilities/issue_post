#!/usr/bin/env ruby

require 'time'
require_relative 'models/post'
require_relative 'models/asset'

class IssuePoster
  def run
    issue_body = File.read("issue_body")
    post = if has_frontmatter?(issue_body)
             post_with_frontmatter(issue_body)
           else
             post_with_form_matter(issue_body)
           end
    post.create_file
    File.delete("issue_body")
  end

  # initialize a post by parsing frontmatter out of the issue_body
  def post_with_frontmatter(issue_body)
    frontmatter = YAML.load(issue_body.match(/---\n(.*?)\n---\n/m)[1])
    body = issue_body.match(/---\n.*\n---\n(.*)/m)[1]
    title = frontmatter['title']
    tags = frontmatter['tags'] || []
    date = frontmatter['date'] || Time.now
    imdb_id = frontmatter['imdb_id']
    rating = frontmatter['rating']
    category = frontmatter['category'] || 'blog'
    in_reply_to = frontmatter['in_reply_to']
    description = frontmatter['description']
    hide_title = frontmatter['hide_title']
    slug = frontmatter['slug'] || title.gsub(/[^a-zA-Z0-9\s]/, '').gsub(/\s+/, '-').downcase
    assets = extract_assets(body)
    assets.map(&:download)
    post = Post.new(
      body: transform_content(body, assets),
      mastodon_social_status_url: 'false',
      bluesky_status_url: 'false',
      category: category,
      in_reply_to: in_reply_to,
      hide_title: hide_title,
      description: description,
      date: date,
      image: assets.find(&:image?)&.public_path || frontmatter['image'],
      imdb_id: imdb_id,
      rating: rating,
      slug: slug,
      tags: tags,
      title: title,
    )
  end

  # initialize a post by parsing the form matter out of the issue_body
  def post_with_form_matter(issue_body)
    title = parse_input(issue_body, 'Title')
    tags = parse_input(issue_body, 'Tags')&.split(",")&.map(&:strip)
    date = parse_date(parse_input(issue_body, 'Date'))
    imdb_id = parse_imdb_id(parse_input(issue_body, 'IMDB ID'))
    rating = parse_rating(parse_input(issue_body, 'Rating'))
    category = parse_input(issue_body, 'Category')
    raw_content = issue_body.split("### Content").slice(1, 10).join("### Content")
    slug = title.gsub(/[^a-zA-Z0-9\s]/, '').gsub(/\s+/, '-').downcase
    assets = extract_assets(raw_content)
    assets.map(&:download)
    post = Post.new(
      body: transform_content(raw_content, assets),
      mastodon_social_status_url: 'false',
      bluesky_status_url: 'false',
      category:,
      date:,
      image: assets.find(&:image?)&.public_path,
      imdb_id:,
      rating:,
      slug:,
      tags:,
      title:,
    )
    unless imdb_id.nil?
      post.image = post.movie_cover_image || post.image
    end
  end

  def has_frontmatter?(body)
    body.match?(/---\n.*\n---\n/m)
  end

  def parse_input(body, input_label)
    match = body.match(/### #{Regexp.quote(input_label)}.*\n\s*\n\s*(.*)/)
    return '_No response_' unless match

    match[1].strip
  end

  def parse_imdb_id(imdb_id)
    return nil if imdb_id.nil?
    return nil if imdb_id.empty?
    return nil unless imdb_id.match?(/tt\d+/)
    imdb_id.strip
  end

  def parse_date(date)
    return Time.now if date.nil?

    Time.parse(date.strip)
  rescue ArgumentError
    Time.now
  end

  def parse_rating(rating)
    return nil if rating.nil?
    return nil if rating.empty?

    parsed = rating.to_i
    return nil if parsed.zero?

    parsed
  end

  def transform_content(content, assets)
    # for each of the assets, replace the url in the content with the path
    assets.reduce(content) do |acc, asset|
      asset.insert_into_content(acc)
    end
  end

  def extract_assets(content)
    # images are identified by regular markdown image syntax
    images = content.scan(/\!\[.*\]\((.*)\)/).flatten.map do |url|
      Asset.new(url: url, category: "images")
    end.concat(content.scan(/<img .*src="(.*)">/).flatten.map do |url|
      Asset.new(url: url, category: "images")
    end)
    # videos are identified by:
    # - a URI at the start of a line
    # - the domain is github.com
    # - the path contains /assets
    videos = content.scan(/^https:\/\/github.com\/.*\/assets\/.*$/).flatten.map do |url|
      Asset.new(url: url, category: "videos")
    end
    images + videos
  end
end

IssuePoster.new.run
